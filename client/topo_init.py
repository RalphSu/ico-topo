__author__ = 'bw'
"""
The is the Python code to initialize the topo config repo in CMS. it will
do the following:
1. create a topo_config repo if not exist yet
2. create meta data definition for Mapping class, schema is defined at mapping_schema.json
3. for subfolder such as aws:
    3.1 create topo_aws for aws topo
    3.2 create metadata definition in topo_aws based on config file in mapping folder
    3.3 load metadata definition in topo_aws
    3.4 load files in mapping folder into topo_config.
"""

import json
import requests
import os
import urllib
import unicodedata

config = json.load(open("topo_config.json"))
cms_endpoint = config['cms_endpoint']
topo_config_repo = config['topo_config_repo']

def u2s(unicode):
    "convert unicode string to string"
    return unicodedata.normalize('NFKD', unicode).encode('ascii','ignore')

def post_change(url, payload):
    " post the change to cms for repo creation and schema push"
    headers = {"Content-Type" : "Application/json"}
    r = requests.post(url,data=json.dumps(payload), headers=headers).json()
    return r

def upsert_repo(repo):
    "create repo if not exists"
    response = requests.get(cms_endpoint + repo).json()
    if (response['status']['code'] == "404"):
        payload = {}
        payload['repositoryName'] = repo
        return post_change(cms_endpoint, payload)

def upsert_mapping(client_id, class_name, payload):
    url = cms_endpoint + topo_config_repo + "/branches/main/TopoMapping"
    r = post_change(url,payload)
    if (r['status']['code'] != "200"):
        return post_change(url + "/" + payload['_oid'], payload)

def init_class(repo, class_name):
    # init a dummy class first for reference
    response = requests.get(cms_endpoint + repo + "/metadata/" + class_name).json()
    if (response['status']['code'] == "404"):
        url = cms_endpoint + repo + "/metadata"
        payload = {}
        payload['name'] = class_name
        return post_change(url,payload)

def upsert_mapping_metadata(repo,class_name,payload):
    # check to see if Mapping schema had been defined
    response = requests.get(cms_endpoint + repo + "/metadata/" + class_name).json()
    if (response['status']['code'] == "404"):
        url = cms_endpoint + repo + "/metadata"
    else:
        url = cms_endpoint + repo + "/metadata/" + class_name
    return post_change(url,payload)

def mapping2metadata(repo, mapping):
    "convert the mapping to CMS metadata"
    metadata = {}
    metadata['name'] = mapping['className']
    metadata['description'] = "Auto generated by topo_init.py"
    fields = {}
    metadata['fields'] = fields
    for item in mapping['fields']:
        item = u2s(item)
        field_def = mapping['fields'][item]
        field = {}
        field['description'] = field_def['path']
        if ('class' in field_def):
            init_class(repo, field_def['class'])
            field['refDataType'] = field_def['class']
            field['relationType'] = 'Reference'
            field['dataType'] = 'relationship'
        else:
            field['dataType'] = field_def['dataType']
        fields[item] = field
    return metadata

def main():
    # check to see if repo exists
    upsert_repo(topo_config_repo)

    mapping = json.load(open("topo_mapping.json"))
    upsert_mapping_metadata(topo_config_repo, "TopoMapping", mapping)

    # loop through each sub directory that having mapping folder
    # load the mapping, create topo_repo and load the meta data
    for x in os.walk("."):
        dir_name = x[0]
        if os.path.isdir(dir_name + "/mapping"):
            client_id = dir_name[2:]
            # create topo repo
            client_config = json.load(open(dir_name + "/" + client_id + "_config.json"))
            topo_repo = client_config['topo_repo']
            upsert_repo(topo_repo)

            # for each class, load the mapping and also load the metadata
            resource_config = json.load(open(dir_name + "/" + client_id + "_resource.json"))
            for resource in resource_config:
                class_name = resource['className']
                mapping_file = dir_name + "/mapping/" + class_name.lower() + ".json"
                mapping_json = json.load(open(mapping_file))
                mapping_payload = {}
                mapping_payload['clientId'] = client_id
                mapping_payload['_oid'] = client_id + ":" + class_name
                mapping_payload['className'] = class_name
                mapping_payload['mapping'] = mapping_json
                upsert_mapping(client_id, class_name, mapping_payload)

                metadata = mapping2metadata(topo_repo, mapping_json)
                r = upsert_mapping_metadata(topo_repo, class_name, metadata)
                print (r['status'])

if __name__ == '__main__':
    main()

